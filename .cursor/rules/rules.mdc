---
description: 
globs: 
alwaysApply: true
---
{
  "autonomousMode": true,
  "agentsEnabled": true,
  "agentMaxRecursions": 10,
  "allowCodeExecution": true,
  "rules": [
    "When a task is given, assume full responsibility to complete it entirely, including writing, testing, running, and fixing code.",
    "Do not ask for permission before generating, running, or testing code—just proceed.",
    "Produce clean, efficient, secure, production-ready code suitable for deployment.",
    "Fix any errors or bugs during execution proactively without requesting input.",
    "Write necessary unit tests, run them, and ensure they pass before marking a task complete.",
    "Prioritize performance, security, readability, and maintainability in all generated code.",
    "Only ask for clarification if critical information is missing and task cannot proceed.",

    // Full-Stack Dependency Propagation
    "Whenever a change, modification, or feature addition is requested, ensure all dependent layers are also updated, including frontend, backend, database, API contracts, and tests.",
    "Do not deliver incomplete implementations — update React components, TypeScript interfaces, FastAPI routes, Pydantic schemas, SQL models, and migrations together as needed.",
    "Ensure consistent data flow across frontend, backend, and database whenever modifications impact multiple layers.",
    "Generate or update necessary database migrations for any schema changes.",
    "Test all updated layers to ensure full functionality and compatibility.",

    
    // Frontend (React/TypeScript)
    "Use TypeScript for all new frontend files.",
    "Use functional React components with hooks.",
    "Use named exports over default exports.",
    "Use camelCase for variables and functions.",
    "Use PascalCase for components and interfaces.",
    "Use kebab-case for CSS classes and file names.",
    "Ant Design is the primary UI library; use CSS Modules or styled-components for custom styles.",
    "Follow responsive and accessible design principles including semantic HTML and ARIA attributes.",
    "Lazy load components where appropriate to improve performance.",
    
    // Backend (FastAPI + Python)
    "Follow PEP8 coding style and use type hints for all functions.",
    "Use async/await for all database operations.",
    "Use dependency injection for database sessions.",
    "SQLAlchemy ORM is used for models with clearly defined relationships and timestamps.",
    "Pydantic models are mandatory for request and response validation.",
    "Return proper HTTP status codes and meaningful error messages.",
    "JWT tokens must be used for authentication with proper password hashing and role-based access control.",
    "Sanitize all user inputs and use parameterized queries to prevent injection attacks.",
    
    // Database & Migrations
    "All schema changes must go through Alembic migrations with up/down scripts.",
    "Maintain proper foreign keys, indexes, and meaningful column names.",
    "Use transactions to ensure data consistency, especially for stock and sales operations.",
    
    // Testing & Documentation
    "Write unit tests for all components and APIs using React Testing Library and pytest.",
    "Mock external dependencies where appropriate.",
    "Tests must pass before considering any task complete.",
    "All code should be documented with meaningful comments and docstrings.",
    "FastAPI's automatic docs must be updated with example requests, responses, and error codes.",
    
    // Performance
    "Frontend should minimize re-renders using React.memo and useMemo where beneficial.",
    "Backend must implement database indexes, pagination for large datasets, and caching for frequently accessed data.",
    
    // Git & Workflow
    "Use conventional commit messages with clear descriptions.",
    "Feature branches are mandatory, merged only after review and passing tests.",
    
    // Security
    "Sanitize all inputs, implement rate limiting, and secure password policies.",
    "Use encrypted storage for sensitive data where necessary.",
    
    // Monitoring & Logging
    "Structured logging is mandatory on both frontend and backend.",
    "Application performance, errors, and database health must be monitored with alerts for critical failures."
  ],
  "codeFormatting": {
    "python": {
      "formatter": "black",
      "linting": true
    },
    "typescript": {
      "formatter": "prettier",
      "linting": true
    },
    "javascript": {
      "formatter": "prettier",
      "linting": true
    },
    "sql": {
      "formatting": true
    }
  },
  "defaultLanguage": "python",
  "autoComplete": {
    "enabled": true
  },
  "safetyChecks": {
    "preventDangerousCommands": true
  }
}

